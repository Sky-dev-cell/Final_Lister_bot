import telebot
from telebot import types
import random
import logging
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()
bot = telebot.TeleBot(os.getenv('TOKEN'))

# —ã—ã—ã—ã—ã—ã—ã—ã—ã—ã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —ã—ã—ã—ã—ã—ã—ã—ã
user_data = {}

class Order:
    def __init__(self):
        self.marketplace = None
        self.warehouse = None
        self.date = None
        self.address = None
        self.distance = None
        self.boxes = None
        self.sender = None
        self.phone = None

    def is_complete(self):
        return all([self.marketplace, self.warehouse, self.date,
                   self.address, self.distance, self.boxes,
                   self.sender, self.phone])

# /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        welcome_text = (
            "üöõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn_new = types.KeyboardButton('üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞')
        btn_help = types.KeyboardButton('üÜò –ü–æ–º–æ—â—å')
        btn_calc = types.KeyboardButton('üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏')
        markup.add(btn_new, btn_help, btn_calc)
        
        bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
        logger.info(f"User {message.chat.id} started the bot")
    except Exception as e:
        logger.error(f"Error in start: {e}")

# –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(func=lambda m: m.text in ['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', '/new'])
def handle_new_order(message):
    try:
        info_text = (
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
            "- –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å\n"
            "- –°–∫–ª–∞–¥ —Ä–∞–∑–≥—Ä—É–∑–∫–∏\n"
            "- –ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è –¥–∞—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏\n"
            "- –ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏\n"
            "- –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ú–ö–ê–î\n"
            "- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–≤\n"
            "- –ò–ü –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n"
            "- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üöö –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        )
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üöö –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"))
        
        bot.send_message(
            message.chat.id,
            info_text,
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in new order: {e}")

@bot.message_handler(func=lambda m: m.text in ['üÜò –ü–æ–º–æ—â—å', '/help'])
def handle_help(message):
    try:
        help_text = (
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ –Ω–æ–º–µ—Ä—É: +7 900 123-45-67"

        )
        bot.send_message(message.chat.id, help_text)
    except Exception as e:
        logger.error(f"Error in help: {e}")

@bot.message_handler(func=lambda m: m.text in ['üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏', '/calc'])
def handle_calc(message):
    try:
        msg = bot.send_message(
            message.chat.id, 
            "üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, process_box_quantity)
    except Exception as e:
        logger.error(f"Error in calc: {e}")

# —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def process_box_quantity(message):
    try:
        if not message.text.isdigit():
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return handle_calc(message)
            
        boxes = int(message.text)
        user_data[message.chat.id] = {'boxes': boxes}
        msg = bot.send_message(
            message.chat.id, 
            "üìè –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –îx–®x–í (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30-20-15 —Å–º):"
        )
        bot.register_next_step_handler(msg, process_box_size)
    except Exception as e:
        logger.error(f"Error in box quantity: {e}")

def process_box_size(message):
    try:
        parts = message.text.lower().split('-')
        if len(parts) != 3:
            raise ValueError
            
        length, width, height = map(int, parts)
        volume = length * width * height
        cost = volume * 100  # –ø–æ —Å–æ—Ç–∫–µ –∑–∞ –∫—É–±–æ–º–µ—Ç—Ä
        
        response = (
            f"üìä –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n"
            f"üì¶ –†–∞–∑–º–µ—Ä –∫–æ—Ä–æ–±–∫–∏: {length}x{width}x{height} —Å–º\n"
            f"üßÆ –û–±—ä–µ–º: {volume} —Å–º¬≥\n"
            f"üíµ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost} —Ä—É–±."
        )
        
        bot.send_message(message.chat.id, response)
        handle_start(message)  # –º–µ–Ω—é
    except:
        bot.send_message(
            message.chat.id, 
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–∞–∫ –îx–®x–í (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30x20x15)"
        )
        handle_calc(message)

# –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤—ã
@bot.message_handler(func=lambda m: m.text == "üöö –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")
def start_order_creation(message):
    try:
        user_data[message.chat.id] = Order()
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn_ozon = types.KeyboardButton('Ozon')
        btn_wb = types.KeyboardButton('Wildberries')
        markup.add(btn_ozon, btn_wb)
        
        bot.send_message(
            message.chat.id,
            "üõí –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error starting order: {e}")

@bot.message_handler(func=lambda m: m.text in ['Ozon', 'Wildberries'])
def process_marketplace(message):
    try:
        user_data[message.chat.id].marketplace = message.text
        msg = bot.send_message(
            message.chat.id, 
            "üè≠ –í–≤–µ–¥–∏—Ç–µ —Å–∫–ª–∞–¥ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–∫–ª–∞–¥ ‚Ññ1):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, process_warehouse)
    except Exception as e:
        logger.error(f"Error processing marketplace: {e}")

def process_warehouse(message):
    try:
        user_data[message.chat.id].warehouse = message.text
        msg = bot.send_message(message.chat.id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        bot.register_next_step_handler(msg, process_date)
    except Exception as e:
        logger.error(f"Error processing warehouse: {e}")

def process_date(message):
    try:
        user_data[message.chat.id].date = message.text
        msg = bot.send_message(message.chat.id, "üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1):")
        bot.register_next_step_handler(msg, process_address)
    except Exception as e:
        logger.error(f"Error processing date: {e}")

def process_address(message):
    try:
        user_data[message.chat.id].address = message.text
        msg = bot.send_message(message.chat.id, "üìç –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ú–ö–ê–î (–≤ –∫–º):")
        bot.register_next_step_handler(msg, process_distance)
    except Exception as e:
        logger.error(f"Error processing address: {e}")

def process_distance(message):
    try:
        user_data[message.chat.id].distance = message.text
        msg = bot.send_message(message.chat.id, "üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–≤:")
        bot.register_next_step_handler(msg, process_boxes)
    except Exception as e:
        logger.error(f"Error processing distance: {e}")

def process_boxes(message):
    try:
        user_data[message.chat.id].boxes = message.text
        msg = bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –ò–ü –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:")
        bot.register_next_step_handler(msg, process_sender)
    except Exception as e:
        logger.error(f"Error processing boxes: {e}")

def process_sender(message):
    try:
        user_data[message.chat.id].sender = message.text
        msg = bot.send_message(message.chat.id, "üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:")
        bot.register_next_step_handler(msg, process_phone)
    except Exception as e:
        logger.error(f"Error processing sender: {e}")

def process_phone(message):
    try:
        user_data[message.chat.id].phone = message.text
        confirm_order(message)
    except Exception as e:
        logger.error(f"Error processing phone: {e}")

def confirm_order(message):
    try:
        order = user_data[message.chat.id]
        
        confirm_text = (
            "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            f"üõí –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {order.marketplace}\n"
            f"üè≠ –°–∫–ª–∞–¥: {order.warehouse}\n"
            f"üìÖ –î–∞—Ç–∞: {order.date}\n"
            f"üè† –ê–¥—Ä–µ—Å: {order.address}\n"
            f"üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {order.distance} –∫–º\n"
            f"üì¶ –ö–æ—Ä–æ–±–∫–∏: {order.boxes}\n"
            f"üë§ –ò–ü: {order.sender}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        )
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_confirm = types.KeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
        btn_cancel = types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
        markup.add(btn_confirm, btn_cancel)
        
        bot.send_message(
            message.chat.id,
            confirm_text,
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error confirming order: {e}")

@bot.message_handler(func=lambda m: m.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
def finish_order(message):
    try:
        order = user_data[message.chat.id]
        order_number = random.randint(1000, 9999)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            message.chat.id,
            f"üéâ –ó–∞—è–≤–∫–∞ #{order_number} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n"
            "üìû –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ ADMINY
        admin_chat_id = "1493522735"
        bot.send_message(
            admin_chat_id,
            f"üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order_number}:\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: @{message.from_user.username or 'N/A'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
            f"üõí –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {order.marketplace}\n"
            f"üè≠ –°–∫–ª–∞–¥: {order.warehouse}\n"
            f"üìÖ –î–∞—Ç–∞: {order.date}\n"
            f"üè† –ê–¥—Ä–µ—Å: {order.address}\n"
            f"üì¶ –ö–æ—Ä–æ–±–∫–∏: {order.boxes}\n"
            f"üëî –ò–ü: {order.sender}"
        )
        
        del user_data[message.chat.id]
        logger.info(f"Order #{order_number} created by {message.chat.id}")
        handle_start(message)  
    except Exception as e:
        logger.error(f"Error finishing order: {e}")

@bot.message_handler(func=lambda m: m.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
def cancel_order(message):
    try:
        if message.chat.id in user_data:
            del user_data[message.chat.id]
        bot.send_message(
            message.chat.id,
            "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=types.ReplyKeyboardRemove()
        )
        handle_start(message)  
    except Exception as e:
        logger.error(f"Error canceling order: {e}")

if __name__ == '__main__':
    logger.info("Starting bot...")
    try:
        logger.info(f"Using token: {bot.token}")  # –ë–æ–∂–µ —ç—Ç–æ —Ç–æ–ª—å–∫–æ —Å–æ–ª–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —è –∑–∞—Ç—É–ø–∏–ª –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        bot.infinity_polling(logger_level=logging.DEBUG)  
    except Exception as e:
        logger.error(f"Bot crashed: {e}", exc_info=True)  

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    logger.info(f"Received message: {message.text}")
    bot.reply_to(message, f"Echo: {message.text}")


